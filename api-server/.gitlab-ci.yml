variables:
  DOCKER_IMAGE: ${REGISTRY_URL}/${REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}
  DOCKER_CONTAINER: ${CI_PROJECT_NAME}
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DOCKER_DRIVER: overlay2
  TRIVYFS_REPORT: "trivy_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
  TRIVY_IMAGE_REPORT: "security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"

stages:
  - backup
  - build
  - test-source-code
  - security-scan-image
  - package-and-push
  - deploy
  - showlog

# ================= Backup =================
backup:
  stage: backup
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir -p backup
    - docker cp ${DOCKER_CONTAINER}:/app/data backup/ || echo "No container to backup"
  artifacts:
    paths:
      - backup/
    expire_in: 1 day
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags

# ================= Build Docker Image =================
build:
  stage: build
  before_script:
    - docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - docker build -t ${DOCKER_IMAGE} .
  after_script:
    - docker logout ${REGISTRY_URL}
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags

# ================= Test Source Code (Maven + Sonar + FS scan) =================
sonar-scan:
  stage: test-source-code
  image: maven:3.8-openjdk-17
  script:
    - >
      mvn clean verify sonar:sonar
      -Dsonar.projectKey=${SONAR_PROJECT_KEY}
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.token=${SONAR_TOKEN}
      -Dsonar.java.binaries=target/classes
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags
  allow_failure: true


trivy-fs-scan:
  stage: test-source-code
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    GIT_STRATEGY: none
  script:
    - docker run --rm -v $PWD:/app aquasec/trivy:latest fs /app --severity HIGH,CRITICAL --format template --template "@/contrib/html.tpl" --output /app/$TRIVYFS_REPORT.html

  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags
  artifacts:
    paths:
      - ${TRIVYFS_REPORT}.html
    expire_in: 1 day
  allow_failure: true

# ================= Security Scan Image =================
trivy-clean-image:
  stage: security-scan-image
  variables:
    GIT_STRATEGY: none
  script:
    - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock/:/var/run/docker.sock aquasec/trivy clean --all 
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags

trivy-image-scan:
  stage: security-scan-image
  variables:
    GIT_STRATEGY: none
  script:
    - docker run --rm -v "$(pwd)":"/${CI_PROJECT_NAME}" -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --format template --template "@/contrib/html.tpl" --output "/${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html" "$DOCKER_IMAGE"
 

  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags
  artifacts:
    paths:
      - ${TRIVY_IMAGE_REPORT}.html
    expire_in: 1 day

# ================= Package and Push =================
package-and-push:
  stage: package-and-push
  variables:
    GIT_STRATEGY: none
  needs: [build, trivy-clean-image, trivy-image-scan]
  before_script:
    - docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - docker push ${DOCKER_IMAGE}
  after_script:
    - docker logout ${REGISTRY_URL}
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags

# ================= Deploy =================
deploy:
  stage: deploy
  needs: [package-and-push]
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - docker pull ${DOCKER_IMAGE}
    - docker rm -f ${DOCKER_CONTAINER} || echo "No existing container to remove"
    - docker run --name ${DOCKER_CONTAINER} -dp ${PROJECT_BACKEND_PORT}:${PROJECT_BACKEND_PORT} ${DOCKER_IMAGE}
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags

# ================= Show Logs =================
showlog:
  stage: showlog
  needs: [deploy]
  variables:
    GIT_STRATEGY: none
  script:
    - sleep 20
    - docker logs ${DOCKER_CONTAINER}
  tags:
    - laptopshop-runner-devops-shell
  only:
    - tags
  when: manual
